// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rating.queries.sql

package rating_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRating = `-- name: CreateRating :exec
INSERT INTO ratings
(
    rating,
    hotel_id,
    user_id,
    comment
)
VALUES
(
    $1::int,
    $2::text,
    $3::text,
    $4::text
)
`

type CreateRatingParams struct {
	Rating  int32  `json:"rating"`
	HotelID string `json:"hotel_id"`
	UserID  string `json:"user_id"`
	Comment string `json:"comment"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) error {
	_, err := q.db.Exec(ctx, createRating,
		arg.Rating,
		arg.HotelID,
		arg.UserID,
		arg.Comment,
	)
	return err
}

const deleteRating = `-- name: DeleteRating :exec
DELETE FROM ratings
WHERE id = $1
`

func (q *Queries) DeleteRating(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRating, id)
	return err
}

const getRatingsByHotel = `-- name: GetRatingsByHotel :many
SELECT id, rating, hotel_id, user_id, comment
FROM ratings
WHERE hotel_id = $1
`

func (q *Queries) GetRatingsByHotel(ctx context.Context, hotelID pgtype.UUID) ([]Rating, error) {
	rows, err := q.db.Query(ctx, getRatingsByHotel, hotelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rating
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.HotelID,
			&i.UserID,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRating = `-- name: UpdateRating :exec
UPDATE ratings
SET 
    rating = $1::int,
    hotel_id = $2::text,
    user_id = $3::text,
    comment = $4::text
WHERE id = $5::text
`

type UpdateRatingParams struct {
	Rating  int32  `json:"rating"`
	HotelID string `json:"hotel_id"`
	UserID  string `json:"user_id"`
	Comment string `json:"comment"`
	ID      string `json:"id"`
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) error {
	_, err := q.db.Exec(ctx, updateRating,
		arg.Rating,
		arg.HotelID,
		arg.UserID,
		arg.Comment,
		arg.ID,
	)
	return err
}
