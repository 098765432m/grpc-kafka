// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.queries.sql

package user_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserByUsername = `-- name: CheckUserByUsername :one
SELECT 
    id,
    username,
    password,
    email,
    role
FROM users WHERE username = $1
`

type CheckUserByUsernameRow struct {
	ID       pgtype.UUID `json:"id"`
	Username string      `json:"username"`
	Password string      `json:"password"`
	Email    string      `json:"email"`
	Role     RoleEnum    `json:"role"`
}

func (q *Queries) CheckUserByUsername(ctx context.Context, username string) (CheckUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, checkUserByUsername, username)
	var i CheckUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
	)
	return i, err
}

const checkUserExistsById = `-- name: CheckUserExistsById :one
SELECT EXISTS (
    SELECT 1
    FROM users
    WHERE id = $1
)
`

func (q *Queries) CheckUserExistsById(ctx context.Context, id pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    username,
    password,
    address,
    email,
    phone_number,
    full_name,
    role,
    hotel_id
) VALUES (
    $1::text, 
    $2::text,
    $3::text,
    $4::text,
    $5::text,
    $6::text,
    $7::role_enum,
    $8::uuid
)
`

type CreateUserParams struct {
	Username    string      `json:"username"`
	Password    string      `json:"password"`
	Address     string      `json:"address"`
	Email       string      `json:"email"`
	PhoneNumber string      `json:"phone_number"`
	FullName    string      `json:"full_name"`
	Role        RoleEnum    `json:"role"`
	HotelID     pgtype.UUID `json:"hotel_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Address,
		arg.Email,
		arg.PhoneNumber,
		arg.FullName,
		arg.Role,
		arg.HotelID,
	)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserById, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, address, email, phone_number, full_name, role, hotel_id FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Address,
		&i.Email,
		&i.PhoneNumber,
		&i.FullName,
		&i.Role,
		&i.HotelID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, password, address, email, phone_number, full_name, role, hotel_id FROM users
ORDER BY hotel_id
LIMIT 20
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Address,
			&i.Email,
			&i.PhoneNumber,
			&i.FullName,
			&i.Role,
			&i.HotelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByIds = `-- name: GetUsersByIds :many
SELECT id, username, password, address, email, phone_number, full_name, role, hotel_id FROM users WHERE id = ANY($1::uuid[])
`

func (q *Queries) GetUsersByIds(ctx context.Context, ids []pgtype.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByIds, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Address,
			&i.Email,
			&i.PhoneNumber,
			&i.FullName,
			&i.Role,
			&i.HotelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserById = `-- name: UpdateUserById :exec
UPDATE users
SET
    username = $1::text,
    password = $2::text,
    address = $3::text,
    email = $4::text,
    phone_number = $5::text,
    full_name = $6::text,
    role = $7::role_enum,
    hotel_id = $8::uuid
WHERE id = $9::uuid
`

type UpdateUserByIdParams struct {
	Username    string      `json:"username"`
	Password    string      `json:"password"`
	Address     string      `json:"address"`
	Email       string      `json:"email"`
	PhoneNumber string      `json:"phone_number"`
	FullName    string      `json:"full_name"`
	Role        RoleEnum    `json:"role"`
	HotelID     pgtype.UUID `json:"hotel_id"`
	ID          pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.Exec(ctx, updateUserById,
		arg.Username,
		arg.Password,
		arg.Address,
		arg.Email,
		arg.PhoneNumber,
		arg.FullName,
		arg.Role,
		arg.HotelID,
		arg.ID,
	)
	return err
}
