// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.queries.sql

package user_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    username, 
    password,
    address,
    email,
    phone_number,
    full_name,
    role,
    hotel_id 
) VALUES (
    $1::text, 
    $2::text,
    $3::text,
    $4::text,
    $5::text,
    $6::text,
    $7::role_enum,
    $8::text
)
`

type CreateUserParams struct {
	Username    string   `json:"username"`
	Password    string   `json:"password"`
	Address     string   `json:"address"`
	Email       string   `json:"email"`
	PhoneNumber string   `json:"phone_number"`
	FullName    string   `json:"full_name"`
	Role        RoleEnum `json:"role"`
	HotelID     string   `json:"hotel_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Address,
		arg.Email,
		arg.PhoneNumber,
		arg.FullName,
		arg.Role,
		arg.HotelID,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, address, email, phone_number, full_name, role, hotel_id FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Address,
		&i.Email,
		&i.PhoneNumber,
		&i.FullName,
		&i.Role,
		&i.HotelID,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    username = $1::text,
    password = $2::text,
    address = $3::text,
    email = $4::text,
    phone_number = $5::text,
    full_name = $6::text,
    role = $7::role_enum,
    hotel_id = $8::text
WHERE id = $9::uuid
`

type UpdateUserParams struct {
	Username    string      `json:"username"`
	Password    string      `json:"password"`
	Address     string      `json:"address"`
	Email       string      `json:"email"`
	PhoneNumber string      `json:"phone_number"`
	FullName    string      `json:"full_name"`
	Role        RoleEnum    `json:"role"`
	HotelID     string      `json:"hotel_id"`
	ID          pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Username,
		arg.Password,
		arg.Address,
		arg.Email,
		arg.PhoneNumber,
		arg.FullName,
		arg.Role,
		arg.HotelID,
		arg.ID,
	)
	return err
}
