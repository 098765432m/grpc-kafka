// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package booking_repo

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BookingStatus string

const (
	BookingStatusBOOKED  BookingStatus = "BOOKED"
	BookingStatusCHECKIN BookingStatus = "CHECK_IN"
	BookingStatusPAID    BookingStatus = "PAID"
)

func (e *BookingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookingStatus(s)
	case string:
		*e = BookingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BookingStatus: %T", src)
	}
	return nil
}

type NullBookingStatus struct {
	BookingStatus BookingStatus `json:"booking_status"`
	Valid         bool          `json:"valid"` // Valid is true if BookingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BookingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookingStatus), nil
}

type Booking struct {
	ID         pgtype.UUID      `json:"id"`
	CheckIn    pgtype.Date      `json:"check_in"`
	CheckOut   pgtype.Date      `json:"check_out"`
	Total      int32            `json:"total"`
	Status     BookingStatus    `json:"status"`
	RoomTypeID pgtype.UUID      `json:"room_type_id"`
	RoomID     pgtype.UUID      `json:"room_id"`
	CreateAt   pgtype.Timestamp `json:"create_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}
