// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: booking.queries.sql

package booking_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBooking = `-- name: CreateBooking :exec
INSERT INTO bookings (
    check_in,
    check_out,
    total,
    status
) VALUES (
    $1::date,
    $2::date,
    $3::int,
    $4::BOOKING_STATUS
)
`

type CreateBookingParams struct {
	CheckIn  pgtype.Date   `json:"check_in"`
	CheckOut pgtype.Date   `json:"check_out"`
	Total    int32         `json:"total"`
	Status   BookingStatus `json:"status"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) error {
	_, err := q.db.Exec(ctx, createBooking,
		arg.CheckIn,
		arg.CheckOut,
		arg.Total,
		arg.Status,
	)
	return err
}

const deleteBookingById = `-- name: DeleteBookingById :exec
DELETE FROM bookings WHERE id = $1
`

func (q *Queries) DeleteBookingById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteBookingById, id)
	return err
}

const getBookingById = `-- name: GetBookingById :one
SELECT id, check_in, check_out, total, status, create_at, updated_at FROM bookings WHERE id = $1
`

func (q *Queries) GetBookingById(ctx context.Context, id pgtype.UUID) (Booking, error) {
	row := q.db.QueryRow(ctx, getBookingById, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CheckIn,
		&i.CheckOut,
		&i.Total,
		&i.Status,
		&i.CreateAt,
		&i.UpdatedAt,
	)
	return i, err
}
