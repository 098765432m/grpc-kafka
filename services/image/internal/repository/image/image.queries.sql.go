// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: image.queries.sql

package image_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteImage, id)
	return err
}

const deleteImages = `-- name: DeleteImages :exec
DELETE FROM images WHERE id = ANY($1::uuid[])
`

func (q *Queries) DeleteImages(ctx context.Context, dollar_1 []pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteImages, dollar_1)
	return err
}

const getImageById = `-- name: GetImageById :one
SELECT id, public_id, format, hotel_id, user_id, room_type_id FROM images WHERE id = $1
`

func (q *Queries) GetImageById(ctx context.Context, id pgtype.UUID) (Image, error) {
	row := q.db.QueryRow(ctx, getImageById, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Format,
		&i.HotelID,
		&i.UserID,
		&i.RoomTypeID,
	)
	return i, err
}

const getImageByUserId = `-- name: GetImageByUserId :one
SELECT id, public_id, format, hotel_id, user_id, room_type_id
FROM images
WHERE user_id = $1
`

func (q *Queries) GetImageByUserId(ctx context.Context, userID pgtype.UUID) (Image, error) {
	row := q.db.QueryRow(ctx, getImageByUserId, userID)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Format,
		&i.HotelID,
		&i.UserID,
		&i.RoomTypeID,
	)
	return i, err
}

const getImagesByHotelId = `-- name: GetImagesByHotelId :many
SELECT id, public_id, format, hotel_id, user_id, room_type_id
FROM images
WHERE hotel_id = $1
`

func (q *Queries) GetImagesByHotelId(ctx context.Context, hotelID pgtype.UUID) ([]Image, error) {
	rows, err := q.db.Query(ctx, getImagesByHotelId, hotelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Format,
			&i.HotelID,
			&i.UserID,
			&i.RoomTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByHotelIds = `-- name: GetImagesByHotelIds :many
SELECT id, public_id, format, hotel_id, user_id, room_type_id
FROM images
WHERE hotel_id = ANY($1::uuid[])
`

func (q *Queries) GetImagesByHotelIds(ctx context.Context, hotelIds []pgtype.UUID) ([]Image, error) {
	rows, err := q.db.Query(ctx, getImagesByHotelIds, hotelIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Format,
			&i.HotelID,
			&i.UserID,
			&i.RoomTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByRoomTypeId = `-- name: GetImagesByRoomTypeId :many
SELECT id, public_id, format, hotel_id, user_id, room_type_id
FROM images
WHERE room_type_id = $1
`

func (q *Queries) GetImagesByRoomTypeId(ctx context.Context, roomTypeID pgtype.UUID) ([]Image, error) {
	rows, err := q.db.Query(ctx, getImagesByRoomTypeId, roomTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Format,
			&i.HotelID,
			&i.UserID,
			&i.RoomTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByRoomTypeIds = `-- name: GetImagesByRoomTypeIds :many
SELECT id, public_id, format, hotel_id, user_id, room_type_id
FROM images
WHERE room_type_id = ANY($1::uuid[])
`

func (q *Queries) GetImagesByRoomTypeIds(ctx context.Context, roomTypeIds []pgtype.UUID) ([]Image, error) {
	rows, err := q.db.Query(ctx, getImagesByRoomTypeIds, roomTypeIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Format,
			&i.HotelID,
			&i.UserID,
			&i.RoomTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByUserIds = `-- name: GetImagesByUserIds :many
SELECT id, public_id, format, hotel_id, user_id, room_type_id
FROM images
WHERE user_id = ANY($1::uuid[])
`

func (q *Queries) GetImagesByUserIds(ctx context.Context, userIds []pgtype.UUID) ([]Image, error) {
	rows, err := q.db.Query(ctx, getImagesByUserIds, userIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Format,
			&i.HotelID,
			&i.UserID,
			&i.RoomTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const uploadHotelImage = `-- name: UploadHotelImage :exec
INSERT INTO images (
    public_id,
    format,
    hotel_id
) VALUES (
    $1::text,
    $2::text,
    $3::uuid
)
`

type UploadHotelImageParams struct {
	PublicID string      `json:"public_id"`
	Format   string      `json:"format"`
	HotelID  pgtype.UUID `json:"hotel_id"`
}

func (q *Queries) UploadHotelImage(ctx context.Context, arg UploadHotelImageParams) error {
	_, err := q.db.Exec(ctx, uploadHotelImage, arg.PublicID, arg.Format, arg.HotelID)
	return err
}

const uploadRoomTypeImage = `-- name: UploadRoomTypeImage :exec
INSERT INTO images (
    public_id,
    format,
    room_type_id
) VALUES (
    $1::text,
    $2::text,
    $3::uuid
)
`

type UploadRoomTypeImageParams struct {
	PublicID   string      `json:"public_id"`
	Format     string      `json:"format"`
	RoomTypeID pgtype.UUID `json:"room_type_id"`
}

func (q *Queries) UploadRoomTypeImage(ctx context.Context, arg UploadRoomTypeImageParams) error {
	_, err := q.db.Exec(ctx, uploadRoomTypeImage, arg.PublicID, arg.Format, arg.RoomTypeID)
	return err
}

const uploadUserImage = `-- name: UploadUserImage :exec
INSERT INTO images (
    public_id,
    format,
    user_id
) VALUES (
    $1::text,
    $2::text,
    $3::uuid
)
`

type UploadUserImageParams struct {
	PublicID string      `json:"public_id"`
	Format   string      `json:"format"`
	UserID   pgtype.UUID `json:"user_id"`
}

func (q *Queries) UploadUserImage(ctx context.Context, arg UploadUserImageParams) error {
	_, err := q.db.Exec(ctx, uploadUserImage, arg.PublicID, arg.Format, arg.UserID)
	return err
}
