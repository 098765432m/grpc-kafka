// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: image.queries.sql

package image_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteImage, id)
	return err
}

const deleteImages = `-- name: DeleteImages :exec
DELETE FROM images WHERE id = ANY($1::uuid[])
`

func (q *Queries) DeleteImages(ctx context.Context, dollar_1 []pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteImages, dollar_1)
	return err
}

const getHotelImages = `-- name: GetHotelImages :many
SELECT 
    id,
    public_id,
    format,
    hotel_id
FROM images
WHERE hotel_id = $1
`

func (q *Queries) GetHotelImages(ctx context.Context, hotelID pgtype.UUID) ([]Image, error) {
	rows, err := q.db.Query(ctx, getHotelImages, hotelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Format,
			&i.HotelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImageById = `-- name: GetImageById :one
SELECT id, public_id, format, hotel_id FROM images WHERE id = $1
`

func (q *Queries) GetImageById(ctx context.Context, id pgtype.UUID) (Image, error) {
	row := q.db.QueryRow(ctx, getImageById, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Format,
		&i.HotelID,
	)
	return i, err
}

const uploadImage = `-- name: UploadImage :exec
INSERT INTO images (
    public_id,
    format,
    hotel_id
) VALUES (
    $1,
    $2,
    $3
)
`

type UploadImageParams struct {
	PublicID string      `json:"public_id"`
	Format   string      `json:"format"`
	HotelID  pgtype.UUID `json:"hotel_id"`
}

func (q *Queries) UploadImage(ctx context.Context, arg UploadImageParams) error {
	_, err := q.db.Exec(ctx, uploadImage, arg.PublicID, arg.Format, arg.HotelID)
	return err
}
