// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: room-type.queries.sql

package room_type_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRoomType = `-- name: CreateRoomType :exec
INSERT INTO room_types
(
    name,
    price,
    hotel_id
)
VALUES
(
    $1::text,
    $2::int,
    $3::uuid
)
`

type CreateRoomTypeParams struct {
	Name    string      `json:"name"`
	Price   int32       `json:"price"`
	HotelID pgtype.UUID `json:"hotel_id"`
}

func (q *Queries) CreateRoomType(ctx context.Context, arg CreateRoomTypeParams) error {
	_, err := q.db.Exec(ctx, createRoomType, arg.Name, arg.Price, arg.HotelID)
	return err
}

const deleteRoomTypeById = `-- name: DeleteRoomTypeById :exec
DELETE FROM room_types
WHERE id = $1
`

func (q *Queries) DeleteRoomTypeById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRoomTypeById, id)
	return err
}

const getRoomTypeById = `-- name: GetRoomTypeById :one
SELECT id, name, price, hotel_id
FROM room_types
WHERE id = $1
`

func (q *Queries) GetRoomTypeById(ctx context.Context, id pgtype.UUID) (RoomType, error) {
	row := q.db.QueryRow(ctx, getRoomTypeById, id)
	var i RoomType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.HotelID,
	)
	return i, err
}

const getRoomTypesByHotelId = `-- name: GetRoomTypesByHotelId :many
SELECT id, name, price, hotel_id
FROM room_types rt
WHERE hotel_id = $1
ORDER BY rt.name
LIMIT 10
`

func (q *Queries) GetRoomTypesByHotelId(ctx context.Context, hotelID pgtype.UUID) ([]RoomType, error) {
	rows, err := q.db.Query(ctx, getRoomTypesByHotelId, hotelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoomType
	for rows.Next() {
		var i RoomType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.HotelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
