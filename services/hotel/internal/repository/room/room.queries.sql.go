// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: room.queries.sql

package room_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRoom = `-- name: CreateRoom :exec
INSERT INTO rooms
(
    name,
    status,
    hotel_id,
    room_type_id
)
VALUES
(
    $1::text,
    $2::text,
    $3::uuid,
    $4::uuid
)
`

type CreateRoomParams struct {
	Name       string      `json:"name"`
	Status     string      `json:"status"`
	HotelID    pgtype.UUID `json:"hotel_id"`
	RoomTypeID pgtype.UUID `json:"room_type_id"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) error {
	_, err := q.db.Exec(ctx, createRoom,
		arg.Name,
		arg.Status,
		arg.HotelID,
		arg.RoomTypeID,
	)
	return err
}

const deleteRoomById = `-- name: DeleteRoomById :exec
DELETE FROM rooms
WHERE id = $1
`

func (q *Queries) DeleteRoomById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRoomById, id)
	return err
}

const getRoomsByHotelId = `-- name: GetRoomsByHotelId :many
SELECT id, name, status, room_type_id, hotel_id
FROM rooms r
WHERE hotel_id = $1
ORDER BY r.name
LIMIT 20
`

func (q *Queries) GetRoomsByHotelId(ctx context.Context, hotelID pgtype.UUID) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRoomsByHotelId, hotelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.RoomTypeID,
			&i.HotelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomsById = `-- name: GetRoomsById :one
SELECT id, name, status, room_type_id, hotel_id
FROM rooms
WHERE id = $1
`

func (q *Queries) GetRoomsById(ctx context.Context, id pgtype.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomsById, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.RoomTypeID,
		&i.HotelID,
	)
	return i, err
}

const getRoomsByRoomTypeId = `-- name: GetRoomsByRoomTypeId :many
SELECT id, name, status, room_type_id, hotel_id
FROM rooms r
WHERE room_type_id = $1
ORDER BY r.name
LIMIT 20
`

func (q *Queries) GetRoomsByRoomTypeId(ctx context.Context, roomTypeID pgtype.UUID) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRoomsByRoomTypeId, roomTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.RoomTypeID,
			&i.HotelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
