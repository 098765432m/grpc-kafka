// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: hotel.queries.sql

package hotel_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHotel = `-- name: CreateHotel :exec
INSERT INTO hotels (name, address) VALUES ($1::text, $2::text)
`

type CreateHotelParams struct {
	Name    string `json:"name"`
	Address string `json:"address"`
}

func (q *Queries) CreateHotel(ctx context.Context, arg CreateHotelParams) error {
	_, err := q.db.Exec(ctx, createHotel, arg.Name, arg.Address)
	return err
}

const deleteHotelById = `-- name: DeleteHotelById :exec
DELETE FROM hotels WHERE id = $1
`

func (q *Queries) DeleteHotelById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteHotelById, id)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, name, address FROM hotels
`

func (q *Queries) GetAll(ctx context.Context) ([]Hotel, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hotel
	for rows.Next() {
		var i Hotel
		if err := rows.Scan(&i.ID, &i.Name, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelById = `-- name: GetHotelById :one
SELECT id, name, address FROM hotels WHERE id = $1
`

func (q *Queries) GetHotelById(ctx context.Context, id pgtype.UUID) (Hotel, error) {
	row := q.db.QueryRow(ctx, getHotelById, id)
	var i Hotel
	err := row.Scan(&i.ID, &i.Name, &i.Address)
	return i, err
}

const updateHotelById = `-- name: UpdateHotelById :exec
UPDATE hotels
SET 
    name = $1::text,
    address = $2::text
WHERE id = $3::uuid
`

type UpdateHotelByIdParams struct {
	Name    string      `json:"name"`
	Address string      `json:"address"`
	ID      pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateHotelById(ctx context.Context, arg UpdateHotelByIdParams) error {
	_, err := q.db.Exec(ctx, updateHotelById, arg.Name, arg.Address, arg.ID)
	return err
}
