// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: hotel.queries.sql

package hotel_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHotel = `-- name: CreateHotel :exec
INSERT INTO hotels (name) VALUES ($1::text)
`

func (q *Queries) CreateHotel(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, createHotel, name)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, name FROM hotels
`

func (q *Queries) GetAll(ctx context.Context) ([]Hotel, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hotel
	for rows.Next() {
		var i Hotel
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelById = `-- name: GetHotelById :one
SELECT id, name FROM hotels WHERE id = $1
`

func (q *Queries) GetHotelById(ctx context.Context, id pgtype.UUID) (Hotel, error) {
	row := q.db.QueryRow(ctx, getHotelById, id)
	var i Hotel
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
